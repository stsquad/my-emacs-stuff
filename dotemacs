; Generic .emacs, written in -*- emacs-lisp -*-
; Time-stamp: <16:15 on Friday, 22 July 2005 by alexjb>
;

(message ".emacs Start")

(setq debug-on-error t)

;;;; Start of real code.

;;; Basic sanity
;; Find out about my environment
;; Tweak a few paths

(defvar I-am-emacs-21 (string-match "GNU Emacs 21" (emacs-version)))

;; Lets define which machine I'm on, therefor if I am at work
;; (this of course falls down when logging on remotely, but hey I
;; always do that in text mode anyway :-)

(defvar I-am-at-work (string-match "transitives" (system-name)))
(defvar I-am-at-home (string-match "malory" (system-name)))
 
;;
;; Lets set some paramters if we are running as a console or under X
;;

(defvar I-am-in-X (> (display-color-cells) 16))
(defvar I-am-in-console (< (display-color-cells) 16))

;; Autoloads
;? Put them near their configuration.
;? Check that extended modes are available.
(autoload 'msb-mode "msb" "Fancier buffer-selection menu" t)

;; Default mode is text-mode,
(setq default-major-mode 'text-mode)

;; Don't truncate message buffer. For debugging reasons.
(setq message-log-max t)

;; Less verbosity
(fset 'yes-or-no-p 'y-or-n-p)

;; Obey local variables set in -*- type things
(setq enable-local-variables t)

;; Silently add trailing newline to file
(setq require-final-newline t)

;; ^K deletes line, not delete to EOL
(setq-default kill-whole-line t)

;; Searches are case sensitive
(setq-default case-fold-search nil)

;; Automagically decompress files
(auto-compression-mode)

;; Change menu entry so it doesn't use faces.
(define-key global-map [menu-bar tools print ps-print-buffer]
  '("Postscript Print Buffer" . ps-print-buffer))

(message "Done Basic Sanity")


;;; Miscellaneous functions

(defun praise-emacs ()
  (interactive)
  (message "Basking in the glory of your praise...")
  (sleep-for 1)
  (message "Basking in the glory of your praise...Done."))

;;
;; Need a better way to do this as fortune is on different places
;; on different machines.
;;
(defun fortune ()
  "Famous unix fortune teller."
  (shell-command-to-string "/usr/bin/fortune"))

;(fortune)

(defun my-kill-line ()
  "Iain's hack to make kill-line work even when you're in the middle of one."
  (interactive)
  (beginning-of-line)
  (call-interactively 'kill-line))


(message "Done defuns")


;;; keymapping
;; I'm allowed to bind: C-c [letter], [f5]-[f9]

;; Goto-line should be easy
(global-set-key "\C-cg" 'goto-line)
(global-set-key "\M-g" 'goto-line)

;; Return => newline-and-indent
(global-unset-key "\C-m")
(global-set-key "\C-m" 'newline-and-indent)

;; Make delete do what I expect
;? Do I still need this?
(global-unset-key [delete])
(global-set-key [delete] 'delete-char)

;; C-k deletes whole line
(global-unset-key "\C-k")
(global-set-key "\C-k" 'my-kill-line)

;; In Emacs 21, home and end go to beginning and end of line. This is
;; clearly the Wrong Thing.
(if I-am-emacs-21
    (progn ()
	   (global-unset-key [home])
	   (global-set-key [home] 'beginning-of-buffer)
	   (global-unset-key [end])
	   (global-set-key [end] 'end-of-buffer)
	   ))

(message "Done keymapping")


(message "Setting up display")

;;; Display hacks

;; Set the frame size to larger if on a Graphics display (we tell by
;; looking at colour cells (must fix to not break emacs20, maybe)
(if I-am-in-X
  (if I-am-at-work
      (progn
	(setq default-frame-alist '((top . 0)
				    (left . 0)
				    ;; (left . 1300) ; right hand monitor
				    (width . 140)
				    (height . 55)
				    (background-color . "DarkSlateGrey")
				    (foreground-color . "wheat")
				    (vertical-scroll-bars . right)
				    (tool-bar-lines . nil))))
    ; smaller screen at home
    (progn
    	(setq default-frame-alist '((top . 0)
			    (left . 0)
			    (width . 120)
			    (height . 50)
			    (background-color . "DarkSlateGrey")
			    (foreground-color . "wheat")
			    (vertical-scroll-bars . right)
			    (tool-bar-lines . nil))))))

;; Create new frame
;
; This is a hack to get around the fact that default-frame-alist
; won't take effect until new frames get created (or so I thought, it
; appears to take effect right away now!

;(if I-am-in-X
;    (progn
;      (new-frame)
;      (delete-frame)
;      (message "done frame switch")))

(message "Display Done")

;; fancier buffer menu
(setq buffers-menu-max-size nil) ; Don't think this is needed with msb
(msb-mode 1)

;; Prettier unique buffer names.
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)

;; Stop the mouse cursor getting in the way. This is great.
(if 'window-system
    (mouse-avoidance-mode 'cat-and-mouse))

;; Change the cursor colour in Ovwrt mode
(defun ins-cursor-set ()
  "Set cursor colour according to insert mode"
  (set-cursor-color
   (if overwrite-mode
       "red"
     "black")))

(if I-am-emacs-21
    (blink-cursor-mode -1))

(add-hook 'post-command-hook 'ins-cursor-set)

(setq frame-title-format "%b")
(setq  icon-title-format "%b")

;(if I-am-emacs-21
;    (progn 
;      (autoload 'zone-when-idle "zone")
;      (zone-when-idle 60)))

;; want to reduce the amount of white space in the mode-line
(setq default-mode-line-format
      '("-"
	mode-line-mule-info
	mode-line-modified
	" "
	mode-line-buffer-identification
	" "
	global-mode-string
	"%[("
	mode-name
	mode-line-process
	minor-mode-alist
	"%n"
	")%]-"
	(line-number-mode "L%l-")
	(column-number-mode "C%c-")
	(which-func-mode ("" which-func-format))
	"-%-"))

;; Let's shrink the minor-mode-alist down to size.
(setcdr (assq 'abbrev-mode minor-mode-alist) '(" Ab"))
(setcdr (assq 'auto-fill-function minor-mode-alist) '(" Fl"))

;; Not added until the relevant mode is loaded.
(setq minor-mode-alist (cons '(compilation-in-progress nil)
				 minor-mode-alist))

;; Uses a separate variable. Isn't that nice?
(setq eldoc-minor-mode-string nil
      highlight-changes-passive-string nil)

;; (display-time) is needed for appt to display in the mode-line, but
;; we don't want the time taking up precious space.
(setq display-time-24hr-format t
      display-time-interval    20
      display-time-format "")
(display-time)

;; Displays current function() in programming modes. 
(setq which-func-modes t
      which-func-format '("[" which-func-current "]-"))
(which-func-mode)

;; Reduce white space
(setq-default mode-line-buffer-identification '("%b"))

;; Does exactly what it says on the tin
(resize-minibuffer-mode t)

;; Make fill do the Right Thing with full-stops.
(setq sentence-end-double-space nil)

;; Highlights region _all_ the time. Slightly buggy...
(transient-mark-mode t)
(delete-selection-mode 1)

;; Groovy things with matching parentheses
(show-paren-mode t)

;; Tweaks to scrolling behaviour. Still a bit odd.
(setq scroll-preserve-screen-position t
      scroll-conservatively 5
      scroll-step 1
      next-line-add-newlines nil)

;; Make pound signs work
(set-language-environment "Latin-1")
(setq unibyte-display-via-language-environment t)

;; Allow narrowing.
(put 'narrow-to-region 'disabled nil)

(message "Done Display Hacks")


;;; Minor modes
;; Highlight changes.
;? Timer-based M-x highlight-changes-rotate-face
(setq highlight-changes-colours '("red1" "red2" "red3" "red4"))
(global-highlight-changes 'passive)

;; Problem is, this only appears to work when h-c-m is 'active. And it
;; sort of clashes with font-lock then.
(add-hook 'highlight-changes-enable-hook
	  '(lambda ()
	     (add-hook 
	      'local-write-file-hooks 'highlight-changes-rotate-faces)))

(add-hook 'highlight-changes-disable-hook
	  '(lambda ()
	     (remove-hook 
	      'local-write-file-hooks 'highlight-changes-rotate-faces)))

;; Expands a time-stamp line
(setq time-stamp-format "%02H:%02M on %:a, %:d %:b %:y by %u")
(add-hook 'write-file-hooks 'time-stamp)

;; HTMLize
;? Buggy.
(if (locate-library "htmlize")
    (progn
      (setq htmlize-output-type 'font
	    htmlize-use-rgb-map nil)	;? (if (not I-am-win32 t)?
      (autoload 'htmlize-buffer "htmlize" "Convert buffer to HTML" t)
      (autoload 'htmlize-file "htmlize" "Convert file to HTML and save" t)
      (autoload 'htmlize-many-files "htmlize" "Convert files to HTML" t)
      (autoload 'htmlize-many-files-dired
	"htmlize" "Convert files to HTML" t)))

;; Auto-Insert
(auto-insert-mode 1)
(setq auto-insert-alist ())		;? html-helper

;; Speedbar (not that I use it much)
(add-hook 'speedbar-load-hook
	  '(lambda ()
	     (setq speedbar-update-speed 5
		   speedbar-track-mouse-flag t
		   speedbar-activity-change-focus t)))

;; Bow down before font-lock
(add-hook 'font-lock-mode-hook
	  '(lambda ()
	     (setq font-lock-maximum-decoration  t
		   font-lock-verbose             t
		   font-lock-support-mode
		                   (if I-am-emacs-21
				       'jit-lock-mode
				     'lazy-lock-mode)
		   lazy-lock-defer-on-scrolling  nil
		   lazy-lock-defer-contextually  t
		   lazy-lock-stealth-verbose     t
		   lazy-lock-stealth-lines       50
		   lazy-lock-stealth-time        3)))
(global-font-lock-mode t)

;;; Major non-file-related modes
;; TRAMP
(if (locate-library "tramp")
    (progn
      (load-library "tramp")
      ))

;; Calendar / Diary stuff.

(setq calendar-latitude      53.30
	calendar-longitude     -2.15
	calendar-location-name "Manchester")
 

(setq european-calendar-style t
      mark-holidays-in-calendar t
      mark-diary-entries-in-calendar t
      all-christian-calendar-holidays t
      all-hebrew-calendar-holidays t
      all-islamic-calendar-holidays t

      appt-audible nil
      appt-display-duration 10
      appt-message-warning-time 8
      appt-display-interval 4)

(add-hook 'diary-hook 'appt-make-list)	;? When does this happen?
(add-hook 'diary-display-hook 'fancy-diary-display)
(add-hook 'list-diary-entries-hook
	  '(lambda ()
	     (sort-diary-entries)
	     (include-other-diary-files)))
(add-hook 'mark-diary-entries-hook 'mark-included-diary-files)

(if (locate-library "todo-mode")
    (progn
      (autoload 'todo-mode "todo-mode" "Major mode for editing TODO lists." t)
      (autoload 'todo-show "todo-mode" "Show TODO items." t)
      (autoload 'todo-insert-item "todo-mode" "Add TODO item." t)
      
      (setq todo-print-function 'ps-print-buffer
	    todo-save-top-priorities-too nil
	    todo-time-string-format "[%02d/%02m/%:y]"
	    todo-entry-prefix-function 'my-todo-entry-timestamp-initials)

      (defun my-todo-entry-timestamp-initials ()
	(let ((time-stamp-format todo-time-string-format))
	  (concat (time-stamp-string) " ")))))

;; Font locking info mode (from Andy.Ling@quantel.com)
(defvar info-font-lock-keywords
  (list
   '("^\\* [^:]+:+" . font-lock-function-name-face)
   '("\\*[Nn]ote\\b[^:]+:+" . font-lock-reference-face)
   '("  \\(Next\\|Prev\\|Up\\):" . font-lock-reference-face))
  "Additional expressions to highlight in Info mode")

(add-hook 'Info-mode-hook
	  (lambda ()
	    (make-local-variable 'font-lock-defaults)
	    (setq
;	          font-lock-defaults '(info-font-lock-keywords nil t)
		  case-fold-search nil)))

;; ediff
;
; Need to setup proberly
;
;? Also need to find a way to restore it all on
;  resume. This stuff is all far from bullet-proof.

(setq diff-switches               "-u"
      ediff-custom-diff-options   "-U3"
      ediff-split-window-function 'split-window-horizontally
      ediff-window-setup-function 'ediff-setup-windows-plain
      ediff-use-last-dir          t)

(add-hook 'ediff-startup-hook 'ediff-toggle-wide-display)

(add-hook 'ediff-cleanup-hook 'ediff-toggle-wide-display)

(add-hook 'ediff-suspend-hook 'ediff-toggle-wide-display)

;; diff-mode
;
; Customise a <alt-G> to go to source
;
(if (locate-library "diff-mode")
    (progn
    (load-library "diff-mode")
    (define-key diff-mode-map (kbd "M-g") 'diff-goto-source)))


;; ispell
;
; There should be an easier way to set the default
; however I'm currently setting each time a file
; is opened using the find-file-hooks
;
; Also if I'm on a odd machine I'll skip it as they have the ispell.el
; library but not the actual ispell program

; I'm British, not Amercian damit!
(defun set-british-dict ()
  "Set British Dictionary"
  (ispell-change-dictionary "british")
  (message "Set ispell to British Dictionary"))

(if (or I-am-at-work I-am-at-home)
    (if (locate-library "ispell")
	(progn
	  (message "Doing ispell dict setting")

					; set British dict for all files
	  (add-hook 'find-file-hooks 'set-british-dict)

					; if we are editing text turn on flyspell mode
	  (add-hook 'text-mode-hook 'flyspell-mode)))
  (message "Skipping ispell"))

;; calculator
;
; If we have the calculator library available lets load it in
;

(if (locate-library "calculator")
    (progn
     (autoload 'calculator "calculator"
      "Run the Emacs calculator." t)
     (global-set-key [(control return)] 'calculator)))

;; Some keybindsings for compile-command and recompile
(global-set-key (kbd "C-c c") 'compile)
(global-set-key (kbd "C-c r") 'recompile)

;; Compile mode. Or rather, comint, compile and mode-compile.
(setq compilation-scroll-output t
      compile-auto-highlight    t
      compilation-window-height 9)

;; Version control library. Splendid.
(setq vc-command-messages t
      vc-initial-comment t)

;; WoMan - WithOut Man
(if (locate-library "woman")
    (progn
      (autoload 'woman "woman" "Decode and browse a UN*X man page." t)
      (autoload 'woman-find-file "woman" "Decode UN*X man-page file." t)
      (autoload 'woman-dired-find-file "woman" "Browse man page from dired" t)

      (setq woman-imenu-title "Imenu"
	    woman-imenu t
	    woman-use-own-frame nil)
      
      (add-hook 'dired-mode-hook
		(lambda ()
		  (define-key dired-mode-map "W" 'woman-dired-find-file)))))

;; Dired stuff
(add-hook 'dired-mode-hook
		(lambda ()
		  (setq truncate-lines t)
		  (auto-show-mode 1)))

;;
;; cc-mode stuff
;;
;; I'll define all my basic prefs in my-c-style from which the others
;; can inherit depending on what I'm working on.
;;

(defconst my-c-style
  '((c-tab-always-indent . nil)
    (c-indent-level 3)
    (c-comment-only-line-offset 0)
    (c-basic-offset . 4)
;    (c-echo-syntactic-information-p . t) - this is only useful for debugging
    (c-electric-pound-behavior . (alignleft))
    (c-hanging-comment-ender-p . nil)
    (c-comment-continuation-stars . "* ")
    (c-recognize-knr-p . nil)
    (c-cleanup-list . (empty-defun-braces
		       defun-close-semi
		       list-close-comma
		       scope-operator))
    (c-hanging-braces-alist . ((brace-list-open)
			       (brace-list-close)
			       (block-close . c-snug-do-while)
			       (substatement-open before after)))
    (c-hanging-colons-alist . ((member-init-intro after)
			       (access-label after)
			       (inher-intro after)
			       (case-label after)
			       (label after)))
    (c-offsets-alist . ((arglist-close . c-lineup-arglist)
			(substatement-open . 0)
			(statement-cont . ++)
			(arglist-cont-nonempty . ++)
;		     (ansi-funcdecl-cont . 0)
			(case-label . +)
			(block-open . 0)))
    (indent-tabs-mode . nil)
    )
  "Alex's C style")

(c-add-style "my-c-style" my-c-style t)
(setq c-default-style "my-c-style")

;;
;; my-c-mode-hook is called every time
;; I enter c-mode where I can enforce my will
;;
(defun my-c-mode-hook()
  "My c-mode hook"
  (interactive)
  (message "In my-c-mode-hook")
  (turn-on-auto-fill)
  (if I-am-emacs-21
      (cwarn-mode)))
  
(add-hook 'c-mode-common-hook 'my-c-mode-hook)

;;
;; Linux Kernel C-mode
;;
(defun linux-c-mode ()
  "C mode with adjusted defaults for use with the Linux kernel."
  (interactive)
  (c-mode)
  (message "Setting Linux C Style")
  (c-set-style "K&R")
  (setq tab-width 8)
  (setq indent-tabs-mode t)
  (setq c-basic-offset 8))

;; if its got linux in the path then its a kernel file
(setq auto-mode-alist (cons '(".*/linux.*/.*\\.[ch]$" . linux-c-mode)
                       auto-mode-alist))

;;
;; Transitive Coding Style
;;
(defconst transitive-c-style
  '("my-c-style"  ; based on my style
    (c-basic-offset . 2)
    (c-comment-only-line-offset . 0)
    (c-hanging-braces-alist     . ((substatement-open before after)))
    (c-offsets-alist . ((topmost-intro        . 0)
                         (topmost-intro-cont   . 0)
                         (substatement         . +)
                         (substatement-open    . 0)
                         (case-label           . +)
                         (access-label         . -)
                         (inclass              . ++)
                         (inline-open          . 0)
                         ))
    (indent-tabs-mode . nil)
    )
  "Transitive's C Style")

(c-add-style "transitive-c-style" transitive-c-style t)

;; Set the proper values for works coding standards
(defun transitive-c-mode()
  "C mode with adjusted defaults for work."
  (interactive)
  (message "Setting Transitive C Style")
  (c++-mode)
  (c-set-style "transitive-c-style")
  (setq-default indent-tabs-mode nil))
  
(if I-am-at-work
    (progn
      (setq auto-mode-alist (cons '(".*/export/.*\\.[ch]$" . transitive-c-mode)
                       auto-mode-alist))
      (setq auto-mode-alist (cons '(".*/export/.*\\.cc$" . transitive-c-mode)
                       auto-mode-alist))))

;;
;; End of c-mode customisations
;;

;; load the ctags library and bind C-f to something worth using :-)
(if (locate-library "etags")
    (progn
      (load-library "etags")
      (global-unset-key "\C-f")
      (global-set-key "\C-f" 'find-tag)))


;; tcl
(add-hook 'tcl-mode-hook
	  '(lambda ()
	     (turn-on-auto-fill)
	     (imenu-add-to-menubar "Imenu")
	     ))

;; CPerl-mode
(setq interpreter-mode-alist (append (list (cons "perl" 'cperl-mode)
					   (cons "perl5" 'cperl-mode)
					   (cons "miniperl" 'cperl-mode))
				     interpreter-mode-alist))

(setq auto-mode-alist (append (list 
			       (cons "\\.\\([pP][Llm]\\|al\\)\\'" 'cperl-mode)
			       (cons "\\.plx\\'" 'cperl-mode)
			       (cons "\\.cgi\\'" 'cperl-mode)
			       (cons "\\.pod\\'" 'cperl-mode)
			       (cons "/home/iain/perl/.*" 'cperl-mode))
			      auto-mode-alist))

(setq cperl-info-on-command-no-prompt nil
      cperl-clobber-lisp-bindings     nil
      cperl-electric-parens           nil
      cperl-electric-keywords         nil)
					 ; cperl-mode tries to load
					 ; abbrev before running the hook

(add-hook 'cperl-mode-hook
	  '(lambda ()
	     (cperl-set-style "BSD")
	     (setq cperl-hairy                                 t
	           cperl-merge-trailing-else                   nil
	           cperl-tab-always-indent                     nil
	           cperl-auto-newline                          nil
	           cperl-electric-lbrace-space                 nil
	           cperl-electric-linefeed                     t
	           cperl-electric-parens                       nil
	           cperl-electric-keywords                     nil
	           cperl-lazy-help-time                        1
	           cperl-extra-newline-before-brace            t
	           cperl-extra-newline-before-brace-multiline  t
	           cperl-max-help-size                         50)
	     (turn-on-auto-fill)
	     (imenu-add-to-menubar "Imenu")
	     (if (not cperl-lazy-installed)	; Only toggle if it's
		 (cperl-toggle-autohelp))	; not already set
	     (if (locate-library "mode-compile")
		 (define-key cperl-mode-map "\C-cr" 'mode-compile))
	     (define-key cperl-mode-map "\C-cc" 'cperl-check-syntax)
	     (define-key cperl-mode-map "\C-j"  'cperl-linefeed)
	     (message "Ran cperl-mode hook")))


;; Elisp mode
(setq auto-mode-alist
      (append (list (cons "\\.emacs\\'" 'emacs-lisp-mode))
	      auto-mode-alist))

(add-hook 'emacs-lisp-mode-hook
	  '(lambda ()
	     (eldoc-mode t)
	     (turn-on-auto-fill)
	     (imenu-add-to-menubar "Imenu")))

(setq tex-default-mode 'latex-mode)	;? Doesn't work.
(add-hook 'tex-mode-hook
	  '(lambda ()
	     (turn-on-auto-fill)
	     (setq tex-dvi-print-command "dvips"
		   tex-dvi-view-command 
		   	(if (eq window-system 'x)
			    "xdvi"
			  "dvi2tty * | cat -s"))))
(add-hook 'latex-mode-hook
	  '(lambda ()
	     (imenu-add-to-menubar "Imenu")))

;; html-helper
;;? See skeleton-insert & auto-insert-alist
;? if new file && /\.hitop$/
;	     (if (eq 0 (string-match "/home/iain/public_html"
;				     buffer-file-name))
;		 (insert "<SET NAME=\"TITLE\"  VALUE=\"Title\">\n"
;			 "<SET NAME=\"BANNER\" VALUE=\"Banner\">\n\n"
;			 "<DEF NAME=\"MAIN\">\n\n</DEF>\n\n"
;			 "<FILE SRC=\"${RELPATH}template.hitop\">\n"))

(if (locate-library "html-helper-mode")
    (progn
      (autoload 'html-helper-mode "html-helper-mode" "Enhanced HTML mode" t)

      (setq auto-mode-alist
	    (append (list (cons "\\.s?html?\\'"  'html-helper-mode))
		    auto-mode-alist)
	    html-helper-mode-uses-visual-basic nil
	    html-helper-address-string user-mail-address)

      (add-hook 'html-helper-load-hook
		'(lambda ()
		   (if (locate-library "html-helper-imenu")
		       (progn
			 (autoload 'html-helper-imenu-setup
			   "html-helper-imenu")
			 (setq html-helper-imenu-title "Imenu")
			 (html-helper-imenu-setup)))

		   (setq tempo-interactive t
			 html-helper-build-new-buffer nil)

		   (defun my-html-helper-timestamp ()
		     (let ((time (current-time-string)))
		       (insert (substring time 4 11)
			       (substring time -4) " ")))
		   (setq html-helper-timestamp-hook 'my-html-helper-timestamp)
		   ))

      (add-hook 'html-helper-mode-hook
		'(lambda ()
		   (setq html-helper-basic-offset 4)
		   
		   (set
		    (make-local-variable 'time-stamp-format)
		    "%:d-%:m-%:y")

		   ;;? Add hitop tags to html-helper-types-to-install?
		   ;;? This looks quite hairy
		   (turn-on-auto-fill)))))

(add-hook 'text-mode-hook
	  '(lambda ()
	     (turn-on-auto-fill)))

(add-hook 'texinfo-mode-hook
	  '(lambda ()
	     (imenu-add-to-menubar "Imenu")))

;; PHP file mode
(if (locate-library "php-mode-102")
    (progn
      (load-library "php-mode-102")
      ;; colourization
      (add-hook 'php-mode-user-hook 'turn-on-font-lock)))

(message "Done various programming modes")


;; enable the mouse wheel
(autoload 'mwheel-install "mwheel" "Enable wheely mouse")
(mwheel-install)


;; Convert dos to unix text files
;; from: elf@ee.ryerson.ca (Luis Fernandes)
;; 22 May 1997

;;; Usage: M-x dos2unix
;;;
(defun dos2unix ()
  "Convert this entire buffer from MS-DOS text file format to UNIX."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (replace-regexp "\r$" "" nil)
    (goto-char (1- (point-max)))
    (if (looking-at "\C-z")
        (delete-char 1))))

;;; Fancy buffer cycleing
;
; this lot may be redundant as most is covered by the bs.el library


; necessary support function for buffer burial
(defun crs-delete-these (delete-these from-this-list)
  "Delete DELETE-THESE FROM-THIS-LIST."
  (cond
   ((car delete-these)
    (if (member (car delete-these) from-this-list)
	(crs-delete-these (cdr delete-these) (delete (car delete-these)
                                                     from-this-list))
      (crs-delete-these (cdr delete-these) from-this-list)))
   (t from-this-list)))

; this is the list of buffers I never want to see
(defvar crs-hated-buffers
  '("KILL" "*Compile-Log*"))

; might as well use this for both
(setq iswitchb-buffer-ignore (append '("^ " "*Buffer") crs-hated-buffers))

(defun crs-hated-buffers ()
  "List of buffers I never want to see, converted from names to buffers."
  (delete nil
	  (append
	   (mapcar 'get-buffer crs-hated-buffers)
	   (mapcar (lambda (this-buffer)
		     (if (string-match "^ " (buffer-name this-buffer))
			 this-buffer))
		   (buffer-list)))))

; I'm sick of switching buffers only to find KILL right in front of me
(defun crs-bury-buffer (&optional n)
  (interactive)
  (unless n
    (setq n 1))
  (let ((my-buffer-list (crs-delete-these (crs-hated-buffers)
					  (buffer-list (selected-frame)))))
    (switch-to-buffer
     (if (< n 0)
	 (nth (+ (length my-buffer-list) n)
	      my-buffer-list)
       (bury-buffer)
       (nth n my-buffer-list)))))

(global-set-key (kbd "<C-tab>") 'crs-bury-buffer)
(global-set-key (kbd "<C-S-iso-lefttab>")
		(lambda ()
		  (interactive)
		  (crs-bury-buffer -1)))

;
; If we have the bs.el library then rebind C-x b to use bs
;
(if (locate-library "bs")
    (progn
      (load-library "bs")
      (global-set-key (kbd "C-x b") 'bs-show)))

;
; Fix the crappy list buffers so you don't need to keep switching focus
;

;Opens list-buffers but with focus on it
(defun list-buffers-other-win ()
      "Opens list-buffers and put focus on it"
      (interactive)
      (list-buffers)
      (other-window 1)
      (delete-other-windows))

(global-set-key "\C-x\C-b" 'list-buffers-other-win)

(message "Done Buffer Handling Tweaks")

;;
;; Handy little key sequence utility so I don't have to guess at the
;; correct kbd incantation
;;

(defun insert-sequence-key (key)
  "Inserts a keystroke suitable for use in fcns like global-set-key"
  (interactive "kInseret key chord: ")
  (insert (format "(kbd \"%s\")" (key-description key))))

(global-set-key (kbd "<C-f8>") 'insert-sequence-key)

;;
;; Make Bookmark handling a little more sane
;;
;; Rebind from the random octo-keys

(global-set-key [(meta b)] 'list-bookmarks)
(global-set-key [(meta a)] 'bookmark-set)

;;
;; Macro keys
;;
;; If I define a single press macro keys I may use them more often
;;

(global-set-key [(control meta m)] 'call-last-kbd-macro)
(global-set-key (kbd "<f10>") 'call-last-kbd-macro)
(global-set-key (kbd "<C-f11>") 'start-kbd-macro)
(global-set-key (kbd "<C-f12>") 'end-kbd-macro)

;;
;; I have the cedat/ecb stuff on some machines which I'm playing with
;; at the moment
;;

(when (file-exists-p "~/.emacs.d/cedet-1.0pre3/common/cedet.el")
  (message "Loading cedat stuff....")
  (load-file "~/.emacs.d/cedet-1.0pre3/common/cedet.el")
  (add-to-list 'load-path "~/.emacs.d/ecb-2.32/")
  (require 'ecb))

(message "Done .emacs")

(setq debug-on-error nil)
